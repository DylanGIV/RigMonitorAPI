// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RigMonitorAPI.Authentication;

namespace RigMonitorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.Property<long>("DeviceGroupsDeviceGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("DevicesDeviceId")
                        .HasColumnType("text");

                    b.HasKey("DeviceGroupsDeviceGroupId", "DevicesDeviceId");

                    b.HasIndex("DevicesDeviceId");

                    b.ToTable("DeviceDeviceGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RigMonitorAPI.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.Device", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("DeviceDescription")
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<long>("RigId")
                        .HasColumnType("bigint");

                    b.HasKey("DeviceId");

                    b.HasIndex("RigId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.DeviceGroup", b =>
                {
                    b.Property<long>("DeviceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DeviceGroupDescription")
                        .HasColumnType("text");

                    b.Property<string>("DeviceGroupName")
                        .HasColumnType("text");

                    b.HasKey("DeviceGroupId");

                    b.ToTable("DeviceGroup");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.DeviceStats", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<short>("CoreClockSpeed")
                        .HasColumnType("smallint");

                    b.Property<short>("DeviceUsage")
                        .HasColumnType("smallint");

                    b.Property<short>("FanSpeed")
                        .HasColumnType("smallint");

                    b.Property<short>("MemoryClockSpeed")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PowerUsage")
                        .HasColumnType("numeric(3,1)");

                    b.Property<short>("Temperature")
                        .HasColumnType("smallint");

                    b.HasKey("Timestamp", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceStats");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.Rig", b =>
                {
                    b.Property<long>("RigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("RigDescription")
                        .HasColumnType("text");

                    b.Property<string>("RigName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("RigId");

                    b.HasIndex("UserId");

                    b.ToTable("Rig");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.RigGroup", b =>
                {
                    b.Property<long>("RigGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("RigGroupDescription")
                        .HasColumnType("text");

                    b.Property<string>("RigGroupName")
                        .HasColumnType("text");

                    b.HasKey("RigGroupId");

                    b.ToTable("RigGroup");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.WalletAddress", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("PoolId")
                        .HasColumnType("text");

                    b.Property<string>("PoolName")
                        .HasColumnType("text");

                    b.HasKey("Address", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WalletAddress");
                });

            modelBuilder.Entity("RigRigGroup", b =>
                {
                    b.Property<long>("RigGroupsRigGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("RigsRigId")
                        .HasColumnType("bigint");

                    b.HasKey("RigGroupsRigGroupId", "RigsRigId");

                    b.HasIndex("RigsRigId");

                    b.ToTable("RigRigGroup");
                });

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.HasOne("RigMonitorAPI.Entities.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("DeviceGroupsDeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RigMonitorAPI.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RigMonitorAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RigMonitorAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RigMonitorAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RigMonitorAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.Device", b =>
                {
                    b.HasOne("RigMonitorAPI.Entities.Rig", "Rig")
                        .WithMany("Devices")
                        .HasForeignKey("RigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rig");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.DeviceStats", b =>
                {
                    b.HasOne("RigMonitorAPI.Entities.Device", "Device")
                        .WithMany("DeviceStats")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.Rig", b =>
                {
                    b.HasOne("RigMonitorAPI.Authentication.ApplicationUser", "User")
                        .WithMany("Rigs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.WalletAddress", b =>
                {
                    b.HasOne("RigMonitorAPI.Authentication.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RigRigGroup", b =>
                {
                    b.HasOne("RigMonitorAPI.Entities.RigGroup", null)
                        .WithMany()
                        .HasForeignKey("RigGroupsRigGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RigMonitorAPI.Entities.Rig", null)
                        .WithMany()
                        .HasForeignKey("RigsRigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RigMonitorAPI.Authentication.ApplicationUser", b =>
                {
                    b.Navigation("Rigs");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.Device", b =>
                {
                    b.Navigation("DeviceStats");
                });

            modelBuilder.Entity("RigMonitorAPI.Entities.Rig", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
